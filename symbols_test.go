package sbproclient

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestParseSymbols(t *testing.T) {
	test := struct {
		s           []byte
		expectedLen int
	}{
		s:           []byte("6A_1_10000!03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|6B_1_10000!03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|6C_5_100000!03-17*03-18*03-19*03-20*06-17*06-18*06-19*06-20*09-16*09-17*09-18*09-19*12-16*12-17*12-18*12-19|6E_5_100000!03-16*03-17*03-18*03-19*03-20*06-16*06-17*06-18*06-19*06-20*09-16*09-17*09-18*09-19*12-16*12-17*12-18*12-19|6J_5_10000000!03-15*03-16*03-17*03-18*03-19*03-20*06-15*06-16*06-17*06-18*06-19*06-20*09-14*09-15*09-16*09-17*09-18*09-19*12-14*12-15*12-16*12-17*12-18*12-19|6N_1_10000!03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|6S_1_10000!03-15*03-16*03-17*03-18*03-19*03-20*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-14*09-15*09-16*09-17*09-18*09-19*12-14*12-15*12-16*12-17*12-18*12-19|BR_1_100!01-18*01-19*01-20*02-18*02-19*02-20*03-18*03-19*03-20*04-18*04-19*04-20*05-18*05-19*05-20*06-18*06-19*06-20*07-18*07-19*08-17*08-18*08-19*09-17*09-18*09-19*10-17*10-18*10-19*11-17*11-18*11-19*12-17*12-18*12-19|BTC_5_1!01-19*01-20*02-19*02-20*03-19*03-20*04-19*04-20*05-18*05-19*05-20*06-18*06-19*07-18*07-19*08-18*08-19*09-18*09-19*10-18*10-19*11-18*11-19*12-18*12-19|CL_1_100!01-13*01-14*01-15*01-16*01-17*01-18*01-19*01-20*02-13*02-14*02-15*02-16*02-17*02-18*02-19*02-20*03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*04-13*04-14*04-15*04-16*04-17*04-18*04-19*04-20*05-13*05-14*05-15*05-16*05-17*05-18*05-19*05-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*07-13*07-14*07-15*07-16*07-17*07-18*07-19*08-13*08-14*08-15*08-16*08-17*08-18*08-19*09-13*09-14*09-15*09-16*09-17*09-18*09-19*10-13*10-14*10-15*10-16*10-17*10-18*10-19*11-13*11-14*11-15*11-16*11-17*11-18*11-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|DAX_5_10!03-18*03-19*03-20*06-18*06-19*06-20*09-17*09-18*09-19*12-17*12-18*12-19|DX_5_1000!03-18*03-19*03-20*06-18*06-19*06-20*09-17*09-18*09-19*12-17*12-18*12-19|EMD_1_10!03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|ES_25_100!03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|FESX_1_1!03-18*03-19*03-20*06-18*06-19*06-20*09-17*09-18*09-19*12-17*12-18*12-19|FGBL_1_100!03-18*03-19*03-20*06-18*06-19*06-20*09-17*09-18*09-19*12-17*12-18*12-19|FGBM_5_1000!03-18*03-19*03-20*06-18*06-19*06-20*09-17*09-18*09-19*12-17*12-18*12-19|GC_1_10!02-13*02-14*02-15*02-16*02-17*02-18*02-19*02-20*04-13*04-14*04-15*04-16*04-17*04-18*04-19*04-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*08-13*08-14*08-15*08-16*08-17*08-18*08-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|HO_1_10000!01-14*01-15*01-16*01-17*01-18*01-19*01-20*02-14*02-15*02-16*02-17*02-18*02-19*02-20*03-14*03-15*03-16*03-17*03-18*03-19*03-20*04-14*04-15*04-16*04-17*04-18*04-19*04-20*05-14*05-15*05-16*05-17*05-18*05-19*05-20*06-14*06-15*06-16*06-17*06-18*06-19*07-14*07-15*07-16*07-17*07-18*07-19*08-14*08-15*08-16*08-17*08-18*08-19*09-14*09-15*09-16*09-17*09-18*09-19*10-14*10-15*10-16*10-17*10-18*10-19*11-14*11-15*11-16*11-17*11-18*11-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|NG_1_1000!01-15*01-16*01-17*01-18*01-19*01-20*02-15*02-16*02-17*02-18*02-19*02-20*03-15*03-16*03-17*03-18*03-19*03-20*04-15*04-16*04-17*04-18*04-19*04-20*05-15*05-16*05-17*05-18*05-19*05-20*06-15*06-16*06-17*06-18*06-19*07-14*07-15*07-16*07-17*07-18*07-19*08-14*08-15*08-16*08-17*08-18*08-19*09-14*09-15*09-16*09-17*09-18*09-19*10-14*10-15*10-16*10-17*10-18*10-19*11-14*11-15*11-16*11-17*11-18*11-19*12-14*12-15*12-16*12-17*12-18*12-19|NQ_25_100!03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|RB_1_10000!01-18*01-19*01-20*02-18*02-19*02-20*03-18*03-19*03-20*04-18*04-19*04-20*05-18*05-19*05-20*06-18*06-19*07-18*07-19*08-18*08-19*09-18*09-19*10-18*10-19*11-18*11-19*12-17*12-18*12-19|SI_5_1000!02-19*03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*05-13*05-14*05-15*05-16*05-17*05-18*05-19*05-20*07-13*07-14*07-15*07-16*07-17*07-18*07-19*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|YM_1_1!03-13*03-15*03-16*03-17*03-18*03-19*03-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19|ZC_25_100!03-18*03-19*03-20*05-18*05-19*05-20*07-18*07-19*09-18*09-19*12-17*12-18*12-19|ZW_25_100!03-18*03-19*03-20*05-18*05-19*05-20*07-18*07-19*09-18*09-19*12-17*12-18*12-19"),
		expectedLen: 26}

	symbols, err := parseSymbols(test.s)
	assert.NoError(t, err)
	assert.Len(t, symbols, test.expectedLen)
}

func TestParseSymbol(t *testing.T) {
	test := struct {
		s              []byte
		expectedSymbol *Symbol
	}{
		s: []byte("6A_1_10000!03-13*03-14*03-15*03-16*03-17*03-18*03-19*03-20*06-13*06-14*06-15*06-16*06-17*06-18*06-19*06-20*09-13*09-14*09-15*09-16*09-17*09-18*09-19*12-13*12-14*12-15*12-16*12-17*12-18*12-19"),
		expectedSymbol: &Symbol{
			Name:     "6A",
			TickCost: 10000,
			Contracts: []*Contract{
				&Contract{6, 2020}, &Contract{3, 2020},
				&Contract{12, 2019}, &Contract{9, 2019}, &Contract{6, 2019}, &Contract{3, 2019},
				&Contract{12, 2018}, &Contract{9, 2018}, &Contract{6, 2018}, &Contract{3, 2018},
				&Contract{12, 2017}, &Contract{9, 2017}, &Contract{6, 2017}, &Contract{3, 2017},
				&Contract{12, 2016}, &Contract{9, 2016}, &Contract{6, 2016}, &Contract{3, 2016},
				&Contract{12, 2015}, &Contract{9, 2015}, &Contract{6, 2015}, &Contract{3, 2015},
				&Contract{12, 2014}, &Contract{9, 2014}, &Contract{6, 2014}, &Contract{3, 2014},
				&Contract{12, 2013}, &Contract{9, 2013}, &Contract{6, 2013}, &Contract{3, 2013}}}}

	symbol, err := parseSymbol(test.s)
	assert.NoError(t, err)
	assert.Equal(t, test.expectedSymbol, symbol)
}

func TestSymbolLastContracts(t *testing.T) {
	symbol, err := parseSymbol([]byte("6E_5_100000!03-16*03-17*03-18*03-19*03-20*06-16*06-17*06-18*06-19*06-20*09-16*09-17*09-18*09-19*12-16*12-17*12-18*12-19"))
	assert.NoError(t, err)

	latestContract, err := symbol.LatestContracts(2)
	assert.NoError(t, err)

	assert.Equal(t, "06-20", latestContract[0].String())
	assert.Equal(t, "03-20", latestContract[1].String())
}
